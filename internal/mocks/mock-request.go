// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/driscollco-cluster/go-service-rest/internal/interfaces (interfaces: Request)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock-request.go -package=mocks . Request
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cache "github.com/driscollco-core/cache"
	fireStore "github.com/driscollco-core/firestore"
	router "github.com/driscollco-core/http-router"
	log "github.com/driscollco-core/log"
	gomock "go.uber.org/mock/gomock"
)

// MockRequest is a mock of Request interface.
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
	isgomock struct{}
}

// MockRequestMockRecorder is the mock recorder for MockRequest.
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance.
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// ArgExists mocks base method.
func (m *MockRequest) ArgExists(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArgExists", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ArgExists indicates an expected call of ArgExists.
func (mr *MockRequestMockRecorder) ArgExists(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArgExists", reflect.TypeOf((*MockRequest)(nil).ArgExists), name)
}

// Body mocks base method.
func (m *MockRequest) Body() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockRequestMockRecorder) Body() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockRequest)(nil).Body))
}

// BodyError mocks base method.
func (m *MockRequest) BodyError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BodyError")
	ret0, _ := ret[0].(error)
	return ret0
}

// BodyError indicates an expected call of BodyError.
func (mr *MockRequestMockRecorder) BodyError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BodyError", reflect.TypeOf((*MockRequest)(nil).BodyError))
}

// Cache mocks base method.
func (m *MockRequest) Cache() cache.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(cache.Cache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockRequestMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockRequest)(nil).Cache))
}

// Context mocks base method.
func (m *MockRequest) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRequestMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRequest)(nil).Context))
}

// Db mocks base method.
func (m *MockRequest) Db() fireStore.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Db")
	ret0, _ := ret[0].(fireStore.Client)
	return ret0
}

// Db indicates an expected call of Db.
func (mr *MockRequestMockRecorder) Db() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Db", reflect.TypeOf((*MockRequest)(nil).Db))
}

// Error mocks base method.
func (m *MockRequest) Error(response ...any) router.Response {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range response {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Error", varargs...)
	ret0, _ := ret[0].(router.Response)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockRequestMockRecorder) Error(response ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockRequest)(nil).Error), response...)
}

// GetArg mocks base method.
func (m *MockRequest) GetArg(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArg", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetArg indicates an expected call of GetArg.
func (mr *MockRequestMockRecorder) GetArg(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArg", reflect.TypeOf((*MockRequest)(nil).GetArg), name)
}

// GetHeader mocks base method.
func (m *MockRequest) GetHeader(header string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", header)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockRequestMockRecorder) GetHeader(header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockRequest)(nil).GetHeader), header)
}

// GetHeaders mocks base method.
func (m *MockRequest) GetHeaders() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaders")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetHeaders indicates an expected call of GetHeaders.
func (mr *MockRequestMockRecorder) GetHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaders", reflect.TypeOf((*MockRequest)(nil).GetHeaders))
}

// GetHost mocks base method.
func (m *MockRequest) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockRequestMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockRequest)(nil).GetHost))
}

// GetIp mocks base method.
func (m *MockRequest) GetIp() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIp")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIp indicates an expected call of GetIp.
func (mr *MockRequestMockRecorder) GetIp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIp", reflect.TypeOf((*MockRequest)(nil).GetIp))
}

// GetPostVariable mocks base method.
func (m *MockRequest) GetPostVariable(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostVariable", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPostVariable indicates an expected call of GetPostVariable.
func (mr *MockRequestMockRecorder) GetPostVariable(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostVariable", reflect.TypeOf((*MockRequest)(nil).GetPostVariable), name)
}

// GetReferer mocks base method.
func (m *MockRequest) GetReferer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReferer indicates an expected call of GetReferer.
func (mr *MockRequestMockRecorder) GetReferer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferer", reflect.TypeOf((*MockRequest)(nil).GetReferer))
}

// GetResponseContent mocks base method.
func (m *MockRequest) GetResponseContent() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseContent")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetResponseContent indicates an expected call of GetResponseContent.
func (mr *MockRequestMockRecorder) GetResponseContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseContent", reflect.TypeOf((*MockRequest)(nil).GetResponseContent))
}

// GetResponseHeaders mocks base method.
func (m *MockRequest) GetResponseHeaders() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseHeaders")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetResponseHeaders indicates an expected call of GetResponseHeaders.
func (mr *MockRequestMockRecorder) GetResponseHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseHeaders", reflect.TypeOf((*MockRequest)(nil).GetResponseHeaders))
}

// GetResponseOutcome mocks base method.
func (m *MockRequest) GetResponseOutcome() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseOutcome")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetResponseOutcome indicates an expected call of GetResponseOutcome.
func (mr *MockRequestMockRecorder) GetResponseOutcome() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseOutcome", reflect.TypeOf((*MockRequest)(nil).GetResponseOutcome))
}

// GetResponseRedirect mocks base method.
func (m *MockRequest) GetResponseRedirect() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseRedirect")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResponseRedirect indicates an expected call of GetResponseRedirect.
func (mr *MockRequestMockRecorder) GetResponseRedirect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseRedirect", reflect.TypeOf((*MockRequest)(nil).GetResponseRedirect))
}

// GetResponseStatusCode mocks base method.
func (m *MockRequest) GetResponseStatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseStatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetResponseStatusCode indicates an expected call of GetResponseStatusCode.
func (mr *MockRequestMockRecorder) GetResponseStatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseStatusCode", reflect.TypeOf((*MockRequest)(nil).GetResponseStatusCode))
}

// GetURL mocks base method.
func (m *MockRequest) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockRequestMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockRequest)(nil).GetURL))
}

// GetUserAgent mocks base method.
func (m *MockRequest) GetUserAgent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserAgent indicates an expected call of GetUserAgent.
func (mr *MockRequestMockRecorder) GetUserAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAgent", reflect.TypeOf((*MockRequest)(nil).GetUserAgent))
}

// HasBody mocks base method.
func (m *MockRequest) HasBody() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBody")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBody indicates an expected call of HasBody.
func (mr *MockRequestMockRecorder) HasBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBody", reflect.TypeOf((*MockRequest)(nil).HasBody))
}

// HeaderExists mocks base method.
func (m *MockRequest) HeaderExists(header string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderExists", header)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HeaderExists indicates an expected call of HeaderExists.
func (mr *MockRequestMockRecorder) HeaderExists(header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderExists", reflect.TypeOf((*MockRequest)(nil).HeaderExists), header)
}

// Log mocks base method.
func (m *MockRequest) Log() log.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(log.Log)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockRequestMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockRequest)(nil).Log))
}

// MessageProcess mocks base method.
func (m *MockRequest) MessageProcess(name, messageType string, content any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageProcess", name, messageType, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageProcess indicates an expected call of MessageProcess.
func (mr *MockRequestMockRecorder) MessageProcess(name, messageType, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageProcess", reflect.TypeOf((*MockRequest)(nil).MessageProcess), name, messageType, content)
}

// PermanentRedirect mocks base method.
func (m *MockRequest) PermanentRedirect(destination string) router.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermanentRedirect", destination)
	ret0, _ := ret[0].(router.Response)
	return ret0
}

// PermanentRedirect indicates an expected call of PermanentRedirect.
func (mr *MockRequestMockRecorder) PermanentRedirect(destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermanentRedirect", reflect.TypeOf((*MockRequest)(nil).PermanentRedirect), destination)
}

// PostVariableExists mocks base method.
func (m *MockRequest) PostVariableExists(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostVariableExists", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PostVariableExists indicates an expected call of PostVariableExists.
func (mr *MockRequestMockRecorder) PostVariableExists(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostVariableExists", reflect.TypeOf((*MockRequest)(nil).PostVariableExists), name)
}

// Redirect mocks base method.
func (m *MockRequest) Redirect(destination string) router.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", destination)
	ret0, _ := ret[0].(router.Response)
	return ret0
}

// Redirect indicates an expected call of Redirect.
func (mr *MockRequestMockRecorder) Redirect(destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockRequest)(nil).Redirect), destination)
}

// Response mocks base method.
func (m *MockRequest) Response(response ...any) router.Response {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range response {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Response", varargs...)
	ret0, _ := ret[0].(router.Response)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockRequestMockRecorder) Response(response ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockRequest)(nil).Response), response...)
}

// SendPubSubMessage mocks base method.
func (m *MockRequest) SendPubSubMessage(topic string, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPubSubMessage", topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPubSubMessage indicates an expected call of SendPubSubMessage.
func (mr *MockRequestMockRecorder) SendPubSubMessage(topic, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPubSubMessage", reflect.TypeOf((*MockRequest)(nil).SendPubSubMessage), topic, msg)
}

// SetResponseHeader mocks base method.
func (m *MockRequest) SetResponseHeader(key, val string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResponseHeader", key, val)
}

// SetResponseHeader indicates an expected call of SetResponseHeader.
func (mr *MockRequestMockRecorder) SetResponseHeader(key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseHeader", reflect.TypeOf((*MockRequest)(nil).SetResponseHeader), key, val)
}

// Success mocks base method.
func (m *MockRequest) Success(response ...any) router.Response {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range response {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Success", varargs...)
	ret0, _ := ret[0].(router.Response)
	return ret0
}

// Success indicates an expected call of Success.
func (mr *MockRequestMockRecorder) Success(response ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockRequest)(nil).Success), response...)
}
