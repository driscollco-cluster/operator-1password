// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/driscollco-cluster/operator-1password/internal/interfaces (interfaces: Sample)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock-sample.go -package=mocks . Sample
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSample is a mock of Sample interface.
type MockSample struct {
	ctrl     *gomock.Controller
	recorder *MockSampleMockRecorder
	isgomock struct{}
}

// MockSampleMockRecorder is the mock recorder for MockSample.
type MockSampleMockRecorder struct {
	mock *MockSample
}

// NewMockSample creates a new mock instance.
func NewMockSample(ctrl *gomock.Controller) *MockSample {
	mock := &MockSample{ctrl: ctrl}
	mock.recorder = &MockSampleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSample) EXPECT() *MockSampleMockRecorder {
	return m.recorder
}

// RepeatSomething mocks base method.
func (m *MockSample) RepeatSomething(thing string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepeatSomething", thing)
	ret0, _ := ret[0].(string)
	return ret0
}

// RepeatSomething indicates an expected call of RepeatSomething.
func (mr *MockSampleMockRecorder) RepeatSomething(thing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepeatSomething", reflect.TypeOf((*MockSample)(nil).RepeatSomething), thing)
}

// SaySomething mocks base method.
func (m *MockSample) SaySomething() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaySomething")
	ret0, _ := ret[0].(string)
	return ret0
}

// SaySomething indicates an expected call of SaySomething.
func (mr *MockSampleMockRecorder) SaySomething() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaySomething", reflect.TypeOf((*MockSample)(nil).SaySomething))
}
